plugins {
    id 'java-library' // Adds Java compiling, testing, bundling capabilities to this build project
}

version = '0.1.0' // Optionally add version number to generated jar file name
sourceCompatibility = '11'

repositories {
    mavenCentral() // Repository from which we retrieve dependency libraries
}

dependencies { // The dependencies for building/testing/running code in this build
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

test {
    useJUnitPlatform {
        // Default value for platform in gradle.properties, or override on command line: -Pplatform=some_value
        def platformProp = platform // Kills build if 'platform' property doesn't exist

        if (platformProp != "test" && platformProp != "staging") {
            throw new InvalidUserDataException("GRADLE ERROR: Platform Property is '" + platformProp + "', but should be 'staging' or 'test'.");
        }
        systemProperty "platform", project.getProperty("platform") // Set system property so we can access property in Java code

        // You can run only tests tagged as 'it' for integration tests
        if (project.hasProperty('type') && project.getProperty('type') == 'it') {
            includeTags 'it'
            excludeTags 'unit' // We don't have tests tagged with 'unit', just showing it's possible to exclude tests too
        }

        println "##########################################################"
        println "   Starting Gradle Demo Test on platform: " + platformProp
        println "##########################################################"
    }

    dependsOn 'cleanTest' // Always run tests, even when nothing changed.

    testLogging {
        // Log result for each test as they run
        events "passed", "skipped", "failed", "standardOut", "standardError"

        exceptionFormat = 'full' // For test failures, show assertion on why it failed instead of just the line number of failure
        showStandardStreams = true // Show stdout and stderr of tests on console
    }

    // Show summary of test run
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}
